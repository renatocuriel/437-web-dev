@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiaWF0IjoxNzQyMDA0ODg4LCJleHAiOjE3NDIwOTEyODh9.NeKAuNGTdDVvCfNGkdEXiQOcR9X2y-A_GE0g4m8yXAQ

### ðŸ”¹ Register a New User
POST http://localhost:3000/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "password": "securepassword123"
}

### ðŸ”¹ Login and Get JWT Token
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "securepassword123"
}

### ðŸ”¹ Test Unauthorized API Access (Should Fail)
GET http://localhost:3000/api/protected-route
Content-Type: application/json

### ðŸ”¹ Fetch User Data (Verify it was added to the users collection)
GET http://localhost:3000/api/users/me
Authorization: Bearer {{authToken}}

################################################################
### ðŸ“š BOOKS API

### ðŸ”¹ Search for Books in Google Books API
GET http://localhost:3000/api/google-books/search?q=Design Patterns
Authorization: Bearer {{authToken}}

### ðŸ”¹ Add a New Book to Database
POST http://localhost:3000/api/books
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "title": "The Pragmatic Programmer",
  "author": ["Andrew Hunt", "David Thomas"],
  "coverImage": "https://example.com/book-cover.jpg",
  "genre": ["Software Development"],
  "totalPages": 352,
  "description": "A classic book on programming best practices."
}

### ðŸ”¹ Get All Books
GET http://localhost:3000/api/books
Authorization: Bearer {{authToken}}

################################################################
### ðŸ“– CURRENTLY READING API

### ðŸ”¹ Set Currently Reading Book
POST http://localhost:3000/api/currently-reading
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "bookId": "67d4e2e054950926c08c9880",
  "currentPage": 50
}

### ðŸ”¹ Get Currently Reading Book
GET http://localhost:3000/api/currently-reading
Authorization: Bearer {{authToken}}

### ðŸ”¹ Update Current Page in Currently Reading
PATCH http://localhost:3000/api/currently-reading
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "currentPage": 100
}

### ðŸ”¹ Finish Reading (Move to Finished Books)
DELETE http://localhost:3000/api/currently-reading
Authorization: Bearer {{authToken}}

################################################################
### ðŸ“‚ LISTS API

### ðŸ”¹ Create a New List
POST http://localhost:3000/api/lists
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "listName": "Favorites"
}

### ðŸ”¹ Get All User Lists
GET http://localhost:3000/api/lists
Authorization: Bearer {{authToken}}

### ðŸ”¹ Add a Book to a List
PATCH http://localhost:3000/api/lists/add-book
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "listId": "LIST_OBJECT_ID_HERE",
  "bookId": "BOOK_OBJECT_ID_HERE"
}

### ðŸ”¹ Remove a Book from a List
PATCH http://localhost:3000/api/lists/remove-book
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "listId": "LIST_OBJECT_ID_HERE",
  "bookId": "BOOK_OBJECT_ID_HERE"
}

### ðŸ”¹ Delete a List
DELETE http://localhost:3000/api/lists
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "listId": "LIST_OBJECT_ID_HERE"
}

################################################################
### ðŸ“œ FINISHED BOOKS API

### ðŸ”¹ Get All Finished Books
GET http://localhost:3000/api/finished-books
Authorization: Bearer {{authToken}}

### ðŸ”¹ Mark a Book as Finished
POST http://localhost:3000/api/finished-books
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "bookId": "BOOK_OBJECT_ID_HERE"
}
